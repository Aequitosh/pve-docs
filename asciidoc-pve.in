#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use File::Path;
use File::Basename;
use IO::File;

use JSON;

my $verbose;
my $keep_artifacts;

my $release = '@RELEASE@';

my $clicmd = shift or
    die "no command specified\n";

my $data_str = "";
while (<main::DATA>) { $data_str .= $_; }

my $fileinfo = decode_json($data_str);

my $tmpprefix = ".asciidoc-pve-tmp_";

my $adoc_source_dir = "/usr/share/pve-doc-generator";

# inside pve-docs source dir?
if (-f "attributes.txt" && -f "pve-admin-guide.adoc") {
    $adoc_source_dir = "."
}

my $prepared_files = {};

my $man_target = 'man';
my $env_stack = [];
my $env_skip = 0;

sub debug {
    my $msg = shift;

    return if !$verbose;

    print STDERR "asciidoc-pve: $msg\n";
}

sub push_environment {
    my ($env, $skip) = @_;

    $skip = 1 if $env_skip;
    $skip = 0 if !defined($skip);

    push @$env_stack, [$env, $skip];

    $env_skip = $skip;
}

sub pop_environment {
    my ($env) = @_;

    my $last_stack_entry = pop @$env_stack;
    die "unable to pop env '$env'" if !defined($last_stack_entry);

    my ($last_env, $skip) = @$last_stack_entry;
    die "environment missmatch (${last_env} != $env)\n" if $last_env ne $env;

    if (!scalar(@$env_stack)) {
	$env_skip = 0;
    } else {
	my (undef, $skip) = @{$env_stack->[-1]};
	$env_skip = $skip;
    }
}

my $files_for_cleanup = [];

sub cleanup {

    return if $keep_artifacts;

    foreach my $file (@$files_for_cleanup) {
	unlink $file;
    }
}

sub replace_wiki_xref {
    my ($blockid, $text) = @_;

    my $link = $fileinfo->{blockid_target}->{wiki}->{$blockid};
    my $reftext = $fileinfo->{reftext}->{wiki}->{$blockid};

    die "unable to resolve wiki link (xref:$blockid)\n"
	if !defined($link);

    $text = $reftext if !length($text);

    die "xref: no text for wiki link '$blockid'\n" if !$text;

    return "$link\[$text\]";
}

sub replace_default_xref {
    my ($blockid, $text) = @_;

    my $link = $fileinfo->{blockid_target}->{default}->{$blockid};
    my $reftext = $fileinfo->{reftext}->{default}->{$blockid};

    die "unable to resolve chapter link (xref:$blockid)\n"
	if !defined($link);

    $text = $reftext if !length($text);

    die "xref: no text for chapter link '$blockid'\n" if !$text;

    return "$link\[$text\]";
}

sub replace_man_xref {
    my ($blockid, $text) = @_;

    my $link = $fileinfo->{blockid_target}->{manvolnum}->{$blockid};
    my $reftext = $fileinfo->{reftext}->{manvolnum}->{$blockid};

    die "unable to resolve man page link (xref:$blockid)\n"
	if !defined($link);

    $text = $reftext if !length($text);

    die "xref: no text for man page link '$blockid'\n" if !$text;

    my $section = $fileinfo->{mansection}->{manvolnum}->{$link};
    die "link target is not a manual page" if !defined($section);


    if ($man_target eq 'html') {
	my $target = $link;
	$target =~ s/\.adoc//;
	$target .= ".$section";
	return "link:${target}.html#${blockid}\[$text\]";
    } elsif ($man_target eq 'man') {
	my $command = $link;
	$command =~ s/\.adoc//;
	return "\*${text}\* (man \*${command}\*($section))";
    } else {
	die "internal error"
    }
}

sub replace_xref {
    my ($env, $blockid, $text) = @_;

    if ($env eq 'wiki') {
	return replace_wiki_xref($blockid, $text);
    } elsif ($env eq 'manvolnum') {
	if (($man_target eq 'man') || ($man_target eq 'html')) {
	    return replace_man_xref($blockid, $text);
	} elsif ($man_target eq 'wiki') {
	    return replace_wiki_xref($blockid, $text);
	} else {
	    die "internal error"
	}
    } elsif ($env eq 'default') {
	return replace_default_xref($blockid, $text);
    } else {
	die "internal error";
    }
}

sub prepare_adoc_file {
    my ($target_env, $filename, $attributes) = @_;

    return $prepared_files->{$filename} if defined($prepared_files->{$filename});

    debug("prepare $filename");

    my $dirname = dirname($filename);
    my $basename = basename($filename);

    my $outfilename = "$dirname/${tmpprefix}$basename";

    $prepared_files->{$filename} = $outfilename;

    my $fh = IO::File->new("$filename", "r") or
	die "unable to open file '$filename' - $!\n";

    my $outfh = IO::File->new("$outfilename", "w") or
	die "unable to open temporary file '$outfilename'\n";

    push @$files_for_cleanup, $outfilename;

    while (defined (my $line = <$fh>)) {
	chomp $line;
	if ($line =~ m/^if(n?)def::(\S+)\[(.*)\]\s*$/) {
	    my ($not, $env, $text) = ($1, $2, $3);
	    die "unsuported ifdef usage - implement me" if $text;

	    my $skip = !exists($attributes->{$env}) ? 1 : 0;
	    $skip = ($skip ? 0 : 1 ) if $not;

	    push_environment($env, $skip);
	    next;
	} elsif ($line =~ m/^endif::(\S+)\[(.*)\]\s*$/) {
	    my ($env, $text) = ($1, $2);
	    die "unsuported ifdef usage - implement me" if $text;
	    pop_environment($env);
	    next;
	}

	next if $env_skip;

	if ($line =~ m/^include::(\S+)(\[.*\]\s*)$/) {
	    my ($fn, $rest) = ($1, $2);
	    debug("include $fn");
	    my $new_fn = prepare_adoc_file($target_env, $fn, $attributes);

	    print $outfh "include::${new_fn}$rest\n";
	    next;
	}

	# fix xrefs
	$line =~ s/xref:([^\s\[\]]+)\[([^\]]*)\]/replace_xref(${target_env},$1,$2)/ge;

	$line =~ s/<<([^\s,\[\]]+)(?:,(.*?))?>>/replace_xref(${target_env},$1,$2)/ge;

	print $outfh $line . "\n";
    }

    return $outfilename;
}

sub compile_asciidoc {
    my ($env) = @_;

    my $outfile;

    GetOptions ("outfile=s" => \$outfile,
		"keep-artifacts" => \$keep_artifacts,
		"verbose"   => \$verbose) or
		    die("Error in command line arguments\n");

    my $infile = shift(@ARGV) or
	die "no input file specified\n";

    scalar(@ARGV) == 0 or
	die "too many arguments...\n";

    defined($fileinfo->{titles}->{$env}) ||
	die "unknown environment '$env'";

    my $title = $fileinfo->{titles}->{$env}->{$infile} or
	die "unable to get title for '$infile'$env\n";

    debug("compile $title");

    my $leveloffset = 0;

    my $doctype = $fileinfo->{doctype}->{$env}->{$infile};

    die "unable to get document type for '$infile'\n"
	if !defined($doctype);

    $leveloffset = - $doctype;

    my $date = `date`;
    chomp $date;

    my $attributes = {
	$env => undef,
	leveloffset => $leveloffset,
    };

    my $mansection = $fileinfo->{mansection}->{$env}->{$infile};

    if ($env eq 'wiki') {
    } elsif ($env eq 'manvolnum') {
	die "undefined man section" if !defined($mansection);
	$attributes->{manvolnum} = $mansection;
    } elsif ($env eq 'default') {
	die "$infile: wrong doctype\n" if $doctype != 0;
	$attributes->{toc} = undef;
    }

    if (!defined($outfile)) {
	$outfile = $infile;
	$outfile =~ s/\.adoc$//;
	if ($env eq 'manvolnum') {
	    if (($man_target eq 'html') || ($man_target eq 'wiki')) {
		$outfile .= ".$mansection.html";
	    } else {
		$outfile .= ".$mansection";
	    }
	} else {
	    $outfile .= ".html";
	}
    }

    if (($env eq 'manvolnum') && ($man_target eq 'man')) {

	# asciidoc /etc/asciidoc/docbook-xsl/manpage.xsl skip REFERENCES
	# section like footnotes, so we cannot use a2x.
	# We use xmlto instead.

	my $cmd = ['asciidoc', '-dmanpage', '-bdocbook', '-a', 'docinfo1'];

	foreach my $key (keys %$attributes) {
	    my $value = $attributes->{$key};
	    if (defined($value)) {
		push @$cmd, '-a', "$key=$value";
	    } else {
		push @$cmd, '-a', $key;
	    }
	}

	push @$cmd, '--verbose' if $verbose;

	my $tmpxmlfile = "${outfile}.xml.tmp";

	push @$cmd, '--out-file', $tmpxmlfile;

	push @$files_for_cleanup, $tmpxmlfile;

	my $new_infile = prepare_adoc_file($env, $infile, $attributes);

	push @$cmd, $new_infile;

	debug("run " . join(' ', @$cmd));

	system(@$cmd) == 0 or
	    die "aciidoc error";

	$cmd = ['xmlto', 'man', $tmpxmlfile];

	push @$cmd, '-v' if $verbose;

	debug("run " . join(' ', @$cmd));

	system(@$cmd) == 0 or
	    die "xmlto error";

    } else {

	$attributes->{icons} = undef;
	$attributes->{'data-uri'} = undef;
	$attributes->{revnumber} = $release;

	my $cmd = ['asciidoc'];

	push @$cmd, '-s' if ($env eq 'wiki') ||
	    (($env eq 'manvolnum') && ($man_target eq 'wiki'));

	foreach my $key (keys %$attributes) {
	    my $value = $attributes->{$key};
	    if (defined($value)) {
		push @$cmd, '-a', "$key=$value";
	    } else {
		push @$cmd, '-a', $key;
	    }
	}

	push @$cmd, '--verbose' if $verbose;

	push @$cmd, '--out-file', $outfile;

	my $new_infile = prepare_adoc_file($env, $infile, $attributes);

	push @$cmd, $new_infile;

	debug("run " . join(' ', @$cmd));

	system(@$cmd) == 0 or
	    die "aciidoc error";
    }
}

if ($clicmd eq 'compile-wiki') {

    eval { compile_asciidoc('wiki'); };
    my $err = $@;

    cleanup();

    die $err if $err;

} elsif ($clicmd eq 'compile-chapter') {

    eval { compile_asciidoc('default'); };
    my $err = $@;

    cleanup();

    die $err if $err;

} elsif ($clicmd eq 'compile-man-html') {

    $man_target = 'html';

    eval { compile_asciidoc('manvolnum'); };
    my $err = $@;

    cleanup();

    die $err if $err;

} elsif ($clicmd eq 'compile-man-wiki') {

    $man_target = 'wiki';

    eval { compile_asciidoc('manvolnum'); };
    my $err = $@;

    cleanup();

    die $err if $err;

} elsif ($clicmd eq 'compile-man') {

    eval { compile_asciidoc('manvolnum'); };
    my $err = $@;

    cleanup();

    die $err if $err;

} else {

    die "unknown command '$clicmd'\n";

}






exit 0;

__END__
